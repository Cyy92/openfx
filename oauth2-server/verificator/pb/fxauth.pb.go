// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fxauth.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthRequest) Reset()         { *m = AuthRequest{} }
func (m *AuthRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()    {}
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fxauth_ffaa545cb05e6e22, []int{0}
}
func (m *AuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRequest.Unmarshal(m, b)
}
func (m *AuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRequest.Marshal(b, m, deterministic)
}
func (dst *AuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRequest.Merge(dst, src)
}
func (m *AuthRequest) XXX_Size() int {
	return xxx_messageInfo_AuthRequest.Size(m)
}
func (m *AuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRequest proto.InternalMessageInfo

func (m *AuthRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AuthResponse struct {
	IsAuth               bool     `protobuf:"varint,1,opt,name=IsAuth,proto3" json:"IsAuth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthResponse) Reset()         { *m = AuthResponse{} }
func (m *AuthResponse) String() string { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()    {}
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fxauth_ffaa545cb05e6e22, []int{1}
}
func (m *AuthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthResponse.Unmarshal(m, b)
}
func (m *AuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthResponse.Marshal(b, m, deterministic)
}
func (dst *AuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthResponse.Merge(dst, src)
}
func (m *AuthResponse) XXX_Size() int {
	return xxx_messageInfo_AuthResponse.Size(m)
}
func (m *AuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthResponse proto.InternalMessageInfo

func (m *AuthResponse) GetIsAuth() bool {
	if m != nil {
		return m.IsAuth
	}
	return false
}

func init() {
	proto.RegisterType((*AuthRequest)(nil), "pb.AuthRequest")
	proto.RegisterType((*AuthResponse)(nil), "pb.AuthResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FxauthClient is the client API for Fxauth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FxauthClient interface {
	Authentication(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Authorization(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type fxauthClient struct {
	cc *grpc.ClientConn
}

func NewFxauthClient(cc *grpc.ClientConn) FxauthClient {
	return &fxauthClient{cc}
}

func (c *fxauthClient) Authentication(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/pb.fxauth/Authentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fxauthClient) Authorization(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/pb.fxauth/Authorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FxauthServer is the server API for Fxauth service.
type FxauthServer interface {
	Authentication(context.Context, *AuthRequest) (*AuthResponse, error)
	Authorization(context.Context, *AuthRequest) (*AuthResponse, error)
}

func RegisterFxauthServer(s *grpc.Server, srv FxauthServer) {
	s.RegisterService(&_Fxauth_serviceDesc, srv)
}

func _Fxauth_Authentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxauthServer).Authentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.fxauth/Authentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxauthServer).Authentication(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fxauth_Authorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FxauthServer).Authorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.fxauth/Authorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FxauthServer).Authorization(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fxauth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.fxauth",
	HandlerType: (*FxauthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authentication",
			Handler:    _Fxauth_Authentication_Handler,
		},
		{
			MethodName: "Authorization",
			Handler:    _Fxauth_Authorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fxauth.proto",
}

func init() { proto.RegisterFile("fxauth.proto", fileDescriptor_fxauth_ffaa545cb05e6e22) }

var fileDescriptor_fxauth_ffaa545cb05e6e22 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xab, 0x48, 0x2c,
	0x2d, 0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe6, 0xe2,
	0x76, 0x2c, 0x2d, 0xc9, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe1, 0x62, 0x0d,
	0xc9, 0xcf, 0x4e, 0xcd, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x94, 0xd4, 0xb8,
	0x78, 0x20, 0x8a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xc4, 0xb8, 0xd8, 0x3c, 0x8b, 0x41,
	0x22, 0x60, 0x65, 0x1c, 0x41, 0x50, 0x9e, 0x51, 0x29, 0x17, 0x1b, 0xc4, 0x02, 0x21, 0x53, 0x2e,
	0x3e, 0x90, 0x48, 0x6a, 0x5e, 0x49, 0x66, 0x72, 0x62, 0x49, 0x66, 0x7e, 0x9e, 0x10, 0xbf, 0x5e,
	0x41, 0x92, 0x1e, 0x92, 0x55, 0x52, 0x02, 0x08, 0x01, 0x88, 0xb1, 0x4a, 0x0c, 0x42, 0x26, 0x5c,
	0xbc, 0x20, 0x91, 0xfc, 0xa2, 0xcc, 0x2a, 0xe2, 0x75, 0x25, 0xb1, 0x81, 0xbd, 0x63, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0xe2, 0xa2, 0xcd, 0x19, 0xde, 0x00, 0x00, 0x00,
}
